apiVersion: v1
kind: Namespace
metadata:
  name: three-tier-app
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: three-tier-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: three-tier-app
data:
  POSTGRES_DB: appdb
  POSTGRES_USER: appuser
  init.sql: |
    CREATE TABLE IF NOT EXISTS messages (
      id SERIAL PRIMARY KEY,
      content TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    INSERT INTO messages (content) VALUES ('Hello from Postgres!');
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: three-tier-app
type: Opaque
data:
  POSTGRES_PASSWORD: cGFzc3dvcmQxMjM= # password123
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: three-tier-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: postgres-secret
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: init-script
          configMap:
            name: postgres-config
            items:
              - key: init.sql
                path: init.sql
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: three-tier-app
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mikroserwis-b
  namespace: three-tier-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mikroserwis-b
  template:
    metadata:
      labels:
        app: mikroserwis-b
    spec:
      containers:
        - name: mikroserwis-b
          image: mikroserwis-b:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
          env:
            - name: DB_HOST
              value: postgres-service
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_DB
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: mikroserwis-b-service
  namespace: three-tier-app
spec:
  selector:
    app: mikroserwis-b
  ports:
    - port: 3000
      targetPort: 3000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mikroserwis-a
  namespace: three-tier-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mikroserwis-a
  template:
    metadata:
      labels:
        app: mikroserwis-a
    spec:
      containers:
        - name: mikroserwis-a
          image: mikroserwis-a:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: MIKROSERWIS_B_URL
              value: "http://mikroserwis-b-service:3000"
---
apiVersion: v1
kind: Service
metadata:
  name: mikroserwis-a-service
  namespace: three-tier-app
spec:
  selector:
    app: mikroserwis-a
  ports:
    - port: 8080
      targetPort: 8080
  type: LoadBalancer
